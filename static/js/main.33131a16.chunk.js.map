{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Statistics/Statistics.js","components/Notification/Notification.js","components/App.js","index.js"],"names":["FeedbackOptions","this","props","options","map","option","type","value","onClick","onLeaveFeedback","Component","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","setState","prevState","countTotalFeedback","Object","values","reduce","acc","countPositiveFeedbackPercentage","Math","round","keys","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAGMA,E,4JACJ,WAAU,IAAD,OACP,OACE,6BACGC,KAAKC,MAAMC,QAAQC,KAAI,SAAAC,GAAM,OAC5B,6BACE,wBACEC,KAAK,SACLC,MAAOF,EACPG,QAAS,kBAAM,EAAKN,MAAMO,gBAAgBJ,IAH5C,SAKGA,KANIA,Y,GALWK,aAwBfV,ICxBTW,E,4JACJ,WACE,OACE,gCACE,6BAAKV,KAAKC,MAAMU,QACfX,KAAKC,MAAMW,gB,GALEH,aAePC,IChBTG,E,4JACJ,WACE,OACE,+BACE,wCACQ,4BAAIb,KAAKC,MAAMa,UAEvB,2CACW,4BAAId,KAAKC,MAAMc,aAE1B,uCACO,4BAAIf,KAAKC,MAAMe,SAEtB,yCACS,4BAAIhB,KAAKC,MAAMgB,WAExB,qDACqB,8BAAIjB,KAAKC,MAAMiB,mBAAf,kB,GAjBJT,aAwBVI,ICvBTM,E,4JACJ,WACE,OAAO,4BAAInB,KAAKC,MAAMmB,c,GAFCX,aAUZU,ICPTE,E,4MACJC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPT,QAAU,SAAAH,GACR,EAAKmB,UAAS,SAAAC,GACZ,OAAO,eAEJpB,EAASoB,EAAUpB,GAAU,O,EAKpCqB,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKL,OAAOM,QAAO,SAACtB,EAAOuB,GAAR,OAAgBA,EAAMvB,IAAO,I,EAGvEwB,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,EAAKV,MAAMR,KAAO,EAAKW,qBAAwB,M,4CAGpE,WACE,MAA+BzB,KAAKsB,MAA5BR,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBd,EAAUwB,OAAOO,KAAKjC,KAAKsB,OAEjC,OACE,qCACE,cAAC,EAAD,CAASX,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBT,QAASA,EAASM,gBAAiBR,KAAKO,YAE3D,cAAC,EAAD,CAASI,MAAM,aAAf,SACGX,KAAKyB,qBAAuB,EAC3B,cAAC,EAAD,CACEX,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOjB,KAAKyB,qBACZP,mBAAoBlB,KAAK8B,oCAG3B,cAAC,EAAD,CAAcV,QAAQ,+B,GA3ChBX,aAmDHY,ICnDfa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.33131a16.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass FeedbackOptions extends Component {\n  render() {\n    return (\n      <ul>\n        {this.props.options.map(option => (\n          <li key={option}>\n            <button\n              type=\"button\"\n              value={option}\n              onClick={() => this.props.onLeaveFeedback(option)}\n            >\n              {option}\n            </button>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.oneOf(['good', 'neutral', 'bad'])),\n};\n\nexport default FeedbackOptions;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Section extends Component {\n  render() {\n    return (\n      <div>\n        <h1>{this.props.title}</h1>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import React, { Component } from 'react';\n\nclass Statistics extends Component {\n  render() {\n    return (\n      <ul>\n        <li>\n          Good: <p>{this.props.good}</p>\n        </li>\n        <li>\n          Neutral: <p>{this.props.neutral}</p>\n        </li>\n        <li>\n          Bad: <p>{this.props.bad}</p>\n        </li>\n        <li>\n          Total: <p>{this.props.total}</p>\n        </li>\n        <li>\n          Positive feedback: <p>{this.props.positivePercentage} %</p>\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default Statistics;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Notification extends Component {\n  render() {\n    return <p>{this.props.message}</p>;\n  }\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport FeedbackOptions from './FeedbackOptions';\nimport Section from './Section';\nimport Statistics from './Statistics';\nimport Notification from './Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onClick = option => {\n    this.setState(prevState => {\n      return {\n        // ...prevState,\n        [option]: prevState[option] + 1,\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((value, acc) => acc + value, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const options = Object.keys(this.state);\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions options={options} onLeaveFeedback={this.onClick} />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}